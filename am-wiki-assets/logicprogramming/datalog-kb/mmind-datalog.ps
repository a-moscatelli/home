% mmind-datalog---bizlogic.ps BEGIN

% main query: TBC isa_betterguess_postAllG(CH0,CH1,CH2,CH3)


isa_solution_exante(CH0,CH1,CH2,CH3) :- itertools_product(CH0,CH1,CH2,CH3,co).


itertools_permutations_fb2(FBTRY, H0P,H0, H1P,H1) :-
isa_validfb2h(FBTRY, H0P,H0),
isa_validfb2h(FBTRY, H1P,H1),
H0P != H1P.
% as per itertools.combinations(range(2), r=1) = (0,) (1,)

itertools_permutations_fb3(FBTRY, H0P,H0, H1P,H1, H2P,H2) :-
itertools_permutations_fb2(FBTRY, H0P,H0, H1P,H1),
itertools_permutations_fb2(FBTRY, H0P,H0,         H2P,H2),
itertools_permutations_fb2(FBTRY,         H1P,H1, H2P,H2).
% as per itertools.combinations(range(3), r=2) = (0, 1) (0, 2) (1, 2)

itertools_permutations_fb4(FBTRY, H0P,H0, H1P,H1, H2P,H2, H3P,H3) :-
itertools_permutations_fb3(FBTRY, H0P,H0, H1P,H1, H2P,H2),
itertools_permutations_fb3(FBTRY, H0P,H0, H1P,H1,         H3P,H3),
itertools_permutations_fb3(FBTRY, H0P,H0,         H2P,H2, H3P,H3),
itertools_permutations_fb3(FBTRY,         H1P,H1, H2P,H2, H3P,H3).
% as per itertools.combinations(range(4), r=3) = (0, 1, 2) (0, 1, 3) (0, 2, 3) (1, 2, 3)

isa_feedbackpermut(FBTRY,H0,H1,H2,H3) :- itertools_permutations_fb4(FBTRY, H0P,H0, H1P,H1, H2P,H2, H3P,H3).

% head(3):
% isa_feedbackpermut(g0, p3, x, p1, w, p0, b, p2, w)
% isa_feedbackpermut(g0, p1, w, p3, x, p2, w, p0, b)
% isa_feedbackpermut(g0, p3, x, p0, b, p1, w, p2, w)



isa_validguess_evenafter_gid(FBTRY,CH0,CH1,CH2,CH3) :-
    isa_validguess(FBTRY,GC0,GC1,GC2,GC3),
    isa_feedbackpermut(FBTRY, H0, H1, H2, H3),
    isa_solution_exante(CH0,CH1,CH2,CH3),
    isa_121match(GC0,H0,CH0),
    isa_121match(GC1,H1,CH1),
    isa_121match(GC2,H2,CH2),
    isa_121match(GC3,H3,CH3).

isa_121match(GCX,HX,CHX) :- isa(GCX,co), isa(HX,fb), isa(CHX,co), GCX  = CHX, HX=b.
isa_121match(GCX,HX,CHX) :- isa(GCX,co), isa(HX,fb), isa(CHX,co), GCX != CHX, HX=x.
% mutex/mutexex on HX

% this ordering is just used to enable the AND logic across all the guessnfeedbacks in the main query isa_betterguess_post_gg()
% predefined up to 10th
follows(g1,g0,gg). follows(g2,g1,gg). follows(g3,g2,gg). follows(g4,g3,gg). follows(g5,g4,gg). follows(g6,g5,gg). follows(g7,g6,gg). follows(g8,g7,gg). follows(g9,g8,gg).

maxg(GN) :- isa_validguesswithfb(GN), not belowming(GN).
belowming(GN) :- CL=gg, follows(LOWERGN,GN,CL), not follows(GN,HIGHERGN,CL),
	isa_validguesswithfb(GN), isa_validguesswithfb(HIGHERGN), isa_validguesswithfb(LOWERGN).

ming(GN) :- isa_validguesswithfb(GN), not aboveming(GN).
aboveming(GN) :- CL=gg, follows(GN,LOWERGN,CL), not follows(HIGHERGN,GN,CL),
	isa_validguesswithfb(GN), isa_validguesswithfb(HIGHERGN), isa_validguesswithfb(LOWERGN).

minandmaxg(MINGN,MAXGN) :- ming(MINGN), maxg(MAXGN).
% mmind-datalog---bizlogic.ps END
% mmind-datalog---entities.ps BEGIN

isa(h0,ho). isa(h1,ho). isa(h2,ho). isa(h3,ho).
isa(c0,co). isa(c1,co). isa(c2,co). isa(c3,co). isa(c4,co). isa(c5,co).
isa(b,fb). isa(x,fb). % isa(x,fb). isa(x,fb).

% sequencing
follows(h1,h0,ho). follows(h2,h1,ho). follows(h3,h2,ho).
% used by greater_than - used by itertools_combinations.

% mmind-datalog---entities.ps END% mmind-datalog---itertools.ps BEGIN

% CL = class

itertools_product(CH0,CH1,CH2,CH3,CL) :- isa(CH0,CL), isa(CH1,CL), isa(CH2,CL), isa(CH3,CL).    % sz = 1296 = NOC**NOH

% reconciliations with python itertools are mentioned below.


greater_than(HH,LL,CL) :- follows(HH,MID,CL), greater_than(MID,LL,CL).
greater_than(HH,LL,CL) :- follows(HH,LL,CL).
% ... recursive rule used for itertools_combinations.
%
% head(3) of greater_than(HH,LL,ho):
% greater_than(h1, h0, ho)
% greater_than(h2, h0, ho)
% greater_than(h2, h1, ho)


itertools_combinations(H0,H1,CL) :- isa(H0,CL), isa(H1,CL), greater_than(H1,H0,CL).
% in python = itertools.combinations(range(4), r=2) %%% sz = 6
itertools_combinations(H0,H1,H2,CL) :- itertools_combinations(H0,H1,CL), itertools_combinations(H0,H2,CL), itertools_combinations(H1,H2,CL).
% in python = itertools.combinations(range(4), r=3) %%% sz = 4
itertools_combinations(H0,H1,H2,H3,CL) :- itertools_combinations(H0,H1,H2,CL), itertools_combinations(H0,H1,H3,CL), itertools_combinations(H0,H2,H3,CL), itertools_combinations(H1,H2,H3,CL).
% in python = itertools.combinations(range(4), r=4) %%% sz = 1
% head(3) of itertools_combinations(H0,H1,H2,H3,ho):
% itertools_combinations(h0, h1, h2, h3, ho)
% (just one)

itertools_permutations(CH0,CH1,CL) :- isa(CH0,CL), isa(CH1,CL), CH0 != CH1.
% in python = itertools.permutations(range(6), r=2) %%% sz = 30
itertools_permutations(CH0,CH1,CH2,CL) :- itertools_permutations(CH0,CH1,CL), itertools_permutations(CH0,CH2,CL), itertools_permutations(CH1,CH2,CL).
% in python = itertools.permutations(range(6), r=3) %%% sz = 120
itertools_permutations(CH0,CH1,CH2,CH3,CL) :- itertools_permutations(CH0,CH1,CH2,CL), itertools_permutations(CH0,CH1,CH3,CL), itertools_permutations(CH0,CH2,CH3,CL), itertools_permutations(CH1,CH2,CH3,CL).
% in python = itertools.permutations(range(6), r=4) %%% sz = 360
%
% head(3) of itertools_permutations(c0, c5, c4, c2, co):
% itertools_permutations(c0, c5, c4, c2, co)
% itertools_permutations(c3, c5, c4, c1, co)
% itertools_permutations(c2, c5, c0, c3, co)



% mmind-datalog---itertools.ps END% mmind-datalog---queries.ps BEGIN


% recursive:
isa_validguess_evenafter_gg_upto_gid(GN,CH0,CH1,CH2,CH3) :- isa_validguess_evenafter_gid(GN,CH0,CH1,CH2,CH3), ming(GN). % g0
isa_validguess_evenafter_gg_upto_gid(GN,CH0,CH1,CH2,CH3) :- isa_validguess_evenafter_gid(GN,CH0,CH1,CH2,CH3), % maxg(HIGHESTGN),
	follows(GN,LOWERGN,gg),
	isa_validguess_evenafter_gg_upto_gid(LOWERGN,CH0,CH1,CH2,CH3).

isa_validguess_evenafter_all_gg(CH0,CH1,CH2,CH3) :- isa_validguess_evenafter_gg_upto_gid(GN,CH0,CH1,CH2,CH3), maxg(GN).



isa_notyet_ruledout_secret(CH0,CH1,CH2,CH3) :- isa_betterguess_post_allg(CH0,CH1,CH2,CH3), isa_validsecret(CH0,CH1,CH2,CH3).
% if no output, the logic is wrong.

off_isa_validsecret(GC0,GC1,GC2,GC3) :- isa_secret(GC0,GC1,GC2,GC3), isa(GC1,co), isa(GC2,co), isa(GC3,co).
isa_validguess(GN,GC0,GC1,GC2,GC3) :- isa_guess(GN,GC0,GC1,GC2,GC3), isa(GC0,co), isa(GC1,co), isa(GC2,co), isa(GC3,co).
isa_validfb(GN,FC0,FC1,FC2,FC3) :- isa_fback(GN,FC0,FC1,FC2,FC3), isa(FC0,fb), isa(FC1,fb), isa(FC2,fb), isa(FC3,fb).
isa_validguesswithfb(GN) :- isa_validguess(GN,GC0,GC1,GC2,GC3), isa_validfb(GN,FC0,FC1,FC2,FC3).

% mmind-datalog---queries.ps END
% mmind-datalog---userinput.ps BEGIN


isa_validfb2h(GN,HO,FBCO0) :- isa_fback(GN,FBCO0,FBCO1,FBCO2,FBCO3), HO=h0.
isa_validfb2h(GN,HO,FBCO1) :- isa_fback(GN,FBCO0,FBCO1,FBCO2,FBCO3), HO=h1.
isa_validfb2h(GN,HO,FBCO2) :- isa_fback(GN,FBCO0,FBCO1,FBCO2,FBCO3), HO=h2.
isa_validfb2h(GN,HO,FBCO3) :- isa_fback(GN,FBCO0,FBCO1,FBCO2,FBCO3), HO=h3.


%% vertical model

%isa_fb_vitem(g0,h0,b). % vitem = vertical item
%isa_fb_vitem(g0,h1,x).
%isa_fb_vitem(g0,h2,x).
%isa_fb_vitem(g0,h3,x).
%isa_fb_vitem(g1,h0,b).
%isa_fb_vitem(g1,h1,b).
%isa_fb_vitem(g1,h2,x).
%isa_fb_vitem(g1,h3,x).
%isa_validfb_v(GN,HO,FBCO) :- isa_fb_vitem(GN,HO,FBCO), isa(HO,ho), isa(FBCO,fb).
%isa_validfb_v(GN,HO,FBCO3) should return the same output of isa_validfb2h(GN,HO,FBCO)


% mmind-datalog---userinput.ps END