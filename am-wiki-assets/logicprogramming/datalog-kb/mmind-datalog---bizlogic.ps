% mmind-datalog---bizlogic.ps BEGIN

% main query: TBC isa_betterguess_postAllG(CH0,CH1,CH2,CH3)

% varnames:
% CHn = guess color of hole n


itertools_permutations_fb(GID, H0P,H0, H1P,H1, H2P,H2, H3P,H3) :-
	isa_validfb2vert(GID, H0P,H0),
	isa_validfb2vert(GID, H1P,H1),
	isa_validfb2vert(GID, H2P,H2),
	isa_validfb2vert(GID, H3P,H3),
	H0P != H1P, H0P != H2P, H0P != H3P,
	H1P != H2P, H1P != H3P,
	H2P != H3P.

% projection
isa_feedbackpermut(GID,H0,H1,H2,H3) :- itertools_permutations_fb(GID, H0P,H0, H1P,H1, H2P,H2, H3P,H3).

% head(3):
% isa_feedbackpermut(g0, p3, x, p1, w, p0, b, p2, w)
% isa_feedbackpermut(g0, p1, w, p3, x, p2, w, p0, b)
% isa_feedbackpermut(g0, p3, x, p0, b, p1, w, p2, w)

isa_solution_exante(CH0,CH1,CH2,CH3) :- itertools_product4(CH0,CH1,CH2,CH3,co).

isa_validguess_evenafter_gid(GID,CH0,CH1,CH2,CH3) :-
    isa_validatedGuess(GID,GC0,GC1,GC2,GC3),
    isa_feedbackpermut(GID, H0, H1, H2, H3),
    isa_solution_exante(CH0,CH1,CH2,CH3),
    isa_121match(GC0,H0,CH0),
    isa_121match(GC1,H1,CH1),
    isa_121match(GC2,H2,CH2),
    isa_121match(GC3,H3,CH3),
    isa_12anymatch(GC0,H0,CH0,CH1,CH2,CH3),
    isa_12anymatch(GC1,H1,CH0,CH1,CH2,CH3),
    isa_12anymatch(GC2,H2,CH0,CH1,CH2,CH3),
    isa_12anymatch(GC3,H3,CH0,CH1,CH2,CH3).

isa_121match(GCX,HX,CHX) :- isa(GCX,co), isa(HX,fb), isa(CHX,co), GCX  = CHX, HX=b.
isa_121match(GCX,HX,CHX) :- isa(GCX,co), isa(HX,fb), isa(CHX,co), GCX != CHX, HX=w.
isa_121match(GCX,HX,CHX) :- isa(GCX,co), isa(HX,fb), isa(CHX,co), GCX != CHX, HX=o.

isa_12anymatch(GCX,HX,CH0,CH1,CH2,CH3) :- HX=w, GCX  = CH0, isa_solution_exante(CH0,CH1,CH2,CH3), isa(GCX,co).
isa_12anymatch(GCX,HX,CH0,CH1,CH2,CH3) :- HX=w, GCX  = CH1, isa_solution_exante(CH0,CH1,CH2,CH3), isa(GCX,co).
isa_12anymatch(GCX,HX,CH0,CH1,CH2,CH3) :- HX=w, GCX  = CH2, isa_solution_exante(CH0,CH1,CH2,CH3), isa(GCX,co).
isa_12anymatch(GCX,HX,CH0,CH1,CH2,CH3) :- HX=w, GCX  = CH3, isa_solution_exante(CH0,CH1,CH2,CH3), isa(GCX,co).
isa_12anymatch(GCX,HX,CH0,CH1,CH2,CH3) :- HX=b, isa_solution_exante(CH0,CH1,CH2,CH3), isa(GCX,co).
isa_12anymatch(GCX,HX,CH0,CH1,CH2,CH3) :- HX=o, isa_solution_exante(CH0,CH1,CH2,CH3), isa(GCX,co).

%is_empty_excluded(CH0,CH1,CH2,CH3,) :-


% mutex/mutexex on HX

% this ordering is just used to enable the AND logic across all the guessnfeedbacks in the main query isa_validguess_evenafter_gg_upto_gid(.)
% predefined up to 10th
%follows(g1,g0,gg). follows(g2,g1,gg). follows(g3,g2,gg). follows(g4,g3,gg). follows(g5,g4,gg). follows(g6,g5,gg). follows(g7,g6,gg). follows(g8,g7,gg). follows(g9,g8,gg).


isa(GG,CL) :- isa_validatedGuess(GG,_,_,_,_), CL=gg.
% when a user submits : api_isa_guess(g0,c0,c0,c0,c1). then you must accept that g0 is a gg.


% gid = guess label (example: g3)

% recursive:
isa_validguess_evenafter_gg_upto_gid(GID,CH0,CH1,CH2,CH3) :- isa_validguess_evenafter_gid(GID,CH0,CH1,CH2,CH3), isa_validatedGuessWithFback(GID), isTheFirst(GID,gg).
isa_validguess_evenafter_gg_upto_gid(GID,CH0,CH1,CH2,CH3) :- isa_validguess_evenafter_gid(GID,CH0,CH1,CH2,CH3),
	follows(GID,LOWERGID,gg),
	isa_validguess_evenafter_gg_upto_gid(LOWERGID,CH0,CH1,CH2,CH3).


%offline_isa_validsecret(GC0,GC1,GC2,GC3) :- isa_secret(GC0,GC1,GC2,GC3), isa(GC1,co), isa(GC2,co), isa(GC3,co).
isa_validatedGuess(GID,GC0,GC1,GC2,GC3) :- api_isa_guess(GID,GC0,GC1,GC2,GC3), isa(GC0,co), isa(GC1,co), isa(GC2,co), isa(GC3,co).
isa_validatedFback(GID,FC0,FC1,FC2,FC3) :- api_isa_fback(GID,FC0,FC1,FC2,FC3), isa(FC0,fb), isa(FC1,fb), isa(FC2,fb), isa(FC3,fb).
isa_validatedGuessWithFback(GID) :- isa_validatedGuess(GID,GC0,GC1,GC2,GC3), isa_validatedFback(GID,FC0,FC1,FC2,FC3).


% mmind-datalog---bizlogic.ps END
